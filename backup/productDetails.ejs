<%- include('../layouts/header.ejs') %>
    <%- include('../layouts/navbar.ejs') %>
<style>
    .sidebar-divider {
    border-top: 1px solid #e2e9e1;
    margin-top: 5px; /* Adjust this value to control the space between the label and the line */
    margin-bottom: 10px; /* Adjust this value to control the space between the line and the next element */
}

</style>

        <main class="main">
            <div class="page-header breadcrumb-wrap">
                <div class="container">
                    <div class="breadcrumb">
                        <a href="/" rel="nofollow">Home</a>
                        <span></span>
                        Shop
                    </div>
                </div>
            </div>
            <section class="mt-50 mb-50">
                <div class="container">
                    <div class="col-12">
                        <div class="shop-product-fillter style-2">
                            <div class="totall-product">
                                <p> We found <strong class="text-brand">688</strong> items for you!</p>
                            </div>
                            <div class="sort-by-product-area">
                                <!-- <div class="sort-by-cover mr-10">
                                    <div class="sort-by-product-wrap">
                                        <div class="sort-by">
                                            <span><i class="fi-rs-apps"></i>Show:</span>
                                        </div>
                                        <div class="sort-by-dropdown-wrap">
                                            <span> 10 <i class="fi-rs-angle-small-down"></i></span>
                                        </div>
                                    </div>
                                    <div class="sort-by-dropdown">
                                        <ul>
                                            <li><a class="active" href="#">10</a></li>
                                            <li><a href="#">50</a></li>
                                            <li><a href="#">100</a></li>
                                            <li><a href="#">200</a></li>
                                            <li><a href="#">All</a></li>
                                        </ul>
                                    </div>
                                </div> -->
                                <div class="sort-by-cover">
                                    <div class="sort-by-product-wrap">
                                        <div class="sort-by">
                                            <span><i class="fi-rs-apps-sort"></i>Sort by:</span>
                                        </div>
                                        <div class="sort-by-dropdown-wrap">
                                            <span> Featured <i class="fi-rs-angle-small-down"></i></span>
                                        </div>
                                    </div>
                                    <div class="sort-by-dropdown">
                                        <ul>
                                            <li><a class="active" href="?sort=featured">Featured</a></li>
                                            <li><a href="?sort=priceinc">Price: Low to High</a></li>
                                            <li><a href="?sort=priceDesc">Price: High to Low</a></li>
                                            <li><a href="?sort=releaseDate">Release Date</a></li>
                                            <li><a href="?sort=avgRating">Avg. Rating</a></li>
                                            <li><a href="?sort=popularity">Popularity</a></li>
                                            <li><a href="?sort=newArrivals">New Arrivals</a></li>
                                            <li><a href="?sort=az">A-Z</a></li>
                                            <li><a href="?sort=za">Z-A</a></li>
                                        </ul>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="container">
                        <div class="row">
                            <div class="col-lg-3 col-md-4 col-sm-4 col-6 primary-sidebar sticky-sidebar">

                                <!-- Filter -->
                                <div class="sidebar-widget price_range range mb-30">
                                    <h5 class="widget-title mb-10 text-center">Filter </h5>
                                    <hr class="sidebar-divider">

                                    <div class="widget-header position-relative mb-20 pb-10">
                                        <label for="category fw-900 " >Category</label>
                                        <hr class="sidebar-divider">
                                        
                                        <ul class="text-center">
                                            <% categories.forEach(category=> { %>

                                                <li class="categoryIsSelected(<%=category.categoryName %>) ? 'selected-category' : ''">
                                                  <a href="/shop?category=<%= category.categoryName %>" >
                                                    <%= category.categoryName %><span></span>
                                                  </a>
                                                </li>
                                                <% }) %>
                                            </ul>
                                        <br>
                                       
                                    </div>
                                    <!-- <div class="bt-1 border-color-1"></div>
                                    <label for="price" class="fw-900">Price</label>
                                    <hr class="sidebar-divider">
                                    

                                    <div class="price-filter">
                                        <div class="price-filter-inner">
                                            <div id="slider-range"></div>
                                            <div class="price_slider_amount">
                                                <div class="label-input">
                                                    <span>Range:</span><input type="text" id="amount" name="price"
                                                        placeholder="Add Your Price" />
                                                </div>
                                            </div>
                                        </div>
                                    </div> -->
                                    <div class="list-group">
                                        <div class="list-group-item mb-10 mt-10">
                                            <hr class="sidebar-divider">
                                            <label class="fw-900">Size</label>
                                            <hr class="sidebar-divider ">
                                            
                                            
                                            <div class="custome-checkbox">
                                                <input class="form-check-input" type="checkbox" name="checkbox"
                                                    id="exampleCheckbox1" value="S">
                                                <label class="form-check-label"
                                                    for="exampleCheckbox1"><span>S</span></label><br>
                                                <input class="form-check-input" type="checkbox" name="checkbox"
                                                    id="exampleCheckbox2" value="M">
                                                <label class="form-check-label"
                                                    for="exampleCheckbox2"><span>M</span></label><br>
                                                <input class="form-check-input" type="checkbox" name="checkbox"
                                                    id="exampleCheckbox3" value="L">
                                                <label class="form-check-label"
                                                    for="exampleCheckbox3"><span>L</span></label><br>
                                                <input class="form-check-input" type="checkbox" name="checkbox"
                                                    id="exampleCheckbox4" value="XL">
                                                <label class="form-check-label"
                                                    for="exampleCheckbox4"><span>XL</span></label><br>
                                                <input class="form-check-input" type="checkbox" name="checkbox"
                                                    id="exampleCheckbox5" value="XXL">
                                                <label class="form-check-label"
                                                    for="exampleCheckbox5"><span>XXL</span></label><br>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="text-center">
                                        <a href="#" class="btn-sm btn-default" id="applyFilterBtn">
                                            <span><i class="fi-rs-filter"></i>Filter</span>
                                        </a>
                                    </div>

                                </div>
                            </div>
                            <div class="col-lg-9 col-md-8 col-sm-8 col-6">
                                <div class="tab-content wow fadeIn animated" id="myTabContent">
                                    <div class="tab-pane fade show active" id="tab-one" role="tabpanel"
                                        aria-labelledby="tab-one">
                                        <div class="row product-grid-4">
                                            <% for(let i=0; i<products.length; i++) { %>
                                                <div class="col-lg-4 col-md-6 col-sm-12 col-12">
                                                    <div class="product-cart-wrap mb-30">
                                                        <div class="product-img-action-wrap">
                                                            <div class="product-img product-img-zoom">
                                                                <a href="/productdetails/<%= products[i]._id %>">
                                                                    <img class="default-img"
                                                                        src="/uploads/product/resized/<%= products[i].productImage[0] %>"
                                                                        alt="">
                                                                    <img class="hover-img"
                                                                        src="/uploads/product/resized/<%= products[i].productImage[1] %>"
                                                                        alt="">
                                                                </a>
                                                            </div>
                                                            <div class="product-action-1">
                                                                <a aria-label="Quick view" class="action-btn hover-up"
                                                                    data-bs-toggle="modal"
                                                                    data-bs-target="#quickViewModal"><i
                                                                        class="fi-rs-eye"></i></a>
                                                                <% if (userWishlist.some(item=>
                                                                    item.productId.equals(products[i]._id))) { %>
                                                                    <a aria-label="Add To Wishlist" class="action-btn"
                                                                        style="background-color: red;"
                                                                        onclick="addToWishList('<%= products[i]._id %>')"><i
                                                                            class="fi-rs-heart"></i></a>
                                                                    <% } else { %>
                                                                        <a aria-label="Add To Wishlist"
                                                                            class="action-btn hover-up"
                                                                            onclick="addToWishList('<%= products[i]._id %>')"><i
                                                                                class="fi-rs-heart"></i></a>
                                                                        <% } %>
                                                                            <a aria-label="Compare"
                                                                                class="action-btn hover-up" href="#"><i
                                                                                    class="fi-rs-shuffle"></i></a>
                                                            </div>
                                                            <div
                                                                class="product-badges product-badges-position product-badges-mrg">
                                                                <% if(products[i].isNew) { %>
                                                                    <span class="new">New</span>
                                                                    <% } %>
                                                                        <% if(products[i].isHot) { %>
                                                                            <span class="hot">Hot</span>
                                                                            <% } %>
                                                                                <% if(products[i].isBestSeller) { %>
                                                                                    <span class="best">Best Sell</span>
                                                                                    <% } %>
                                                            </div>
                                                        </div>
                                                        <div class="product-content-wrap">
                                                            <div class="product-category">
                                                                <a href="/productdetails/<%= products[i]._id %>">
                                                                    <% if (products[i].category) { %>
                                                                        <p>
                                                                            <%= products[i].category.categoryName %>
                                                                        </p>
                                                                        <% } else { %>
                                                                            <p>Category: Not specified</p>
                                                                            <% } %>
                                                                </a>
                                                            </div>
                                                            <h2><a href="/productdetails/<%= products[i]._id %>">
                                                                    <%= products[i].name%>
                                                                </a></h2>
                                                            <div class="rating-result" title="90%">
                                                                <span><span>90%</span></span>
                                                            </div>
                                                            <div class="product-price">
                                                                <span>₹<%= products[i].price %></span>
                                                                <% if(products[i].price) { %>
                                                                    <span class="old-price">₹<%= products[i].price %>
                                                                    </span>
                                                                    <% } %>
                                                            </div>
                                                            <div class="product-action-1 show">
                                                                <button aria-label="Add To Cart"
                                                                    class="action-btn hover-up"
                                                                    onclick="addToCart('<%= products[i]._id %>', '<%= products[i].name %>', '<%= products[i].price %>')">
                                                                    <i class="fi-rs-shopping-bag-add"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>





                </div>
                </div>
                <!-- Pagination -->
                <div class="pagination-area mt-30 mb-50" id="pagination-container">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-end">
                            <% for (let i=1; i <=totalPages; i++) { %>
                                <% if (i===currentPage) { %>
                                    <li class="page-item active">
                                        <a class="page-link" onclick="handlePaginationChange('<%= i %>')">
                                            <%= i %>
                                        </a>
                                    </li>
                                    <% } else { %>
                                        <li class="page-item">
                                            <a class="page-link" onclick="handlePaginationChange('<%= i %>')">
                                                <%= i %>
                                            </a>
                                        </li>
                                        <% } %>
                                            <% } %>

                        </ul>
                    </nav>
                </div>

            </section>
        </main>


        <%- include('../layouts/footer.ejs') %>
            <%- include('../layouts/preloader.ejs') %>
                <%- include('../layouts/script.ejs') %>





                    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

                    <script>
                        function addToCart(productId, name, price) {
                            // Assuming you want to add 1 quantity by default
                            const quantity = 1;
                            fetch('/cart/addToCart/' + productId, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ productId, name, quantity, price }),
                            })
                                .then(response => {
                                    if (response.redirected) {
                                        return Swal.fire({
                                            title: 'Login Required',
                                            text: 'You must be logged in to add items to your cart.',
                                            icon: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Login',
                                            cancelButtonText: 'Cancel',
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location.href = '/login';
                                            } else {
                                                throw new Error('Action cancelled');
                                            }
                                        });
                                    }
                                    return response.json();
                                })

                                .then(data => {
                                    if (data.status) {
                                        // Show a success message using SweetAlert2
                                        const Toast = Swal.mixin({
                                            toast: true,
                                            position: "top-end",
                                            showConfirmButton: false,
                                            timer: 3000,
                                            timerProgressBar: true,
                                            didOpen: (toast) => {
                                                toast.onmouseenter = Swal.stopTimer;
                                                toast.onmouseleave = Swal.resumeTimer;
                                            }
                                        });
                                        Toast.fire({
                                            icon: "success",
                                            title: 'Success!',
                                            text: data.message,
                                        });
                                    } else {
                                        // Handle errors
                                        Swal.fire({
                                            title: 'Error!',
                                            text: data.message,
                                            icon: 'error',
                                        });
                                    }
                                })
                                .catch(err => {
                                    if (!err.data.success) {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: err.response.data.message,
                                        });
                                    } else {
                                        console.error(err);
                                    }
                                });
                        }

                        function addToWishList(productId) {


                            fetch('/wishList/addTowishList/' + productId, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ productId }),
                            })

                                .then(response => {
                                    if (response.redirected) {
                                        return Swal.fire({
                                            title: 'Login Required',
                                            text: 'You must be logged in to add items to your Wishlist.',
                                            icon: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Login',
                                            cancelButtonText: 'Cancel',
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location.href = '/login';
                                            } else {
                                                throw new Error('Action cancelled');
                                            }
                                        });
                                    }
                                    return response.json();
                                })

                                .then(data => {
                                    if (data.status) {
                                        // Show a success message using SweetAlert2
                                        const Toast = Swal.mixin({
                                            toast: true,
                                            position: "top-end",
                                            showConfirmButton: false,
                                            timer: 3000,
                                            timerProgressBar: true,
                                            didOpen: (toast) => {
                                                toast.onmouseenter = Swal.stopTimer;
                                                toast.onmouseleave = Swal.resumeTimer;
                                            }
                                        });
                                        Toast.fire({
                                            icon: "success",
                                            title: 'Success!',
                                            text: data.message,
                                        });
                                        setTimeout(() => {
                                            location.reload();
                                        }, 3000);

                                    } else {
                                        // Handle errors
                                        Swal.fire({
                                            title: 'Error!',
                                            text: data.message,
                                            icon: 'error',
                                        });
                                    }
                                })
                                .catch(err => {
                                    if (!err.data.success) {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: err.response.data.message,
                                        });
                                    } else {
                                        console.error(err);
                                    }
                                });
                        }


                     





                    </script>














                    //for shop showing product
const shop = async (req, res) => {
    try {
        const { sort, page, limit = 3, category, filter } = req.query;
        console.log("req.query", req.query)

        const currentPage = parseInt(page, 10) || 1;
        console.log("currentPage", currentPage)

        const userId = req.session.user_id;
        let userWishlist = [];
        if (userId) { // If the user is logged in
            userWishlist = await Wishlist.find({ user: userId }).populate('productId');
        }

        let query = { isUnlisted: false };

        if (category) {
            const categoryId = await Category.findOne({ categoryName: category }).select('_id');
            if (categoryId) {
                query.category = categoryId;
                console.log(`Filtering by category ID: ${categoryId}`);
            } else {
                console.log(`Category not found: ${category}`);
            }
        }
        


        let sortQuery = {};
        switch (sort) {
            case 'popularity':
                sortQuery = { popularity: -1 };
                break;
            case 'priceinc':
                sortQuery = { price: 1 };
                break;
            case 'priceDesc':
                sortQuery = { price: -1 };
                break;
            case 'featured':
                sortQuery = { isFeatured: -1 };
                break;
            case 'newArrivals':
                sortQuery = { createdAt: -1 };
                break;
            case 'az':
                sortQuery = { name: 1 };
                break;
            case 'za':
                sortQuery = { name: -1 };
                break;
            default:
                sortQuery = { createdAt: -1 };
        }
        console.log("sortQuery", sortQuery)

        const products = await Product.find(query)
            .populate('category')
            .sort(sortQuery)
            .skip((currentPage - 1) * limit)
            .limit(parseInt(limit));

        const categories = await Category.find({ isUnlisted: false });

        const totalCount = await Product.countDocuments(query);
        console.log("totalCount", totalCount)

        const totalPages = Math.ceil(totalCount / limit);
        console.log("totalPages", totalPages)


        res.render('shop', {
            req,
            products,
            totalPages,
            currentPage,
            limit,
            sort,
            filter,
            categories,
            userWishlist
        });
    } catch (error) {
        console.log(error.message);
        return res.status(500).json({ success: false, message: 'Internal Server Error. Please try again later.' });
    }
};









const loadSalesReport = async (req, res) => {
  try {
    
    let page = 1;
    if (req.query.page) {
      page = parseInt(req.query.page);
      // console.log('inside sales report')
    }
    const limit = 10;
    const orderData = await Order.find({ 'status': 'delivered' })
      .populate({
        path: 'user',
        model: 'User',
      })
      .populate({
        path: 'product.productId',
        model: 'Product',
      })
      .sort({ Date: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .exec();

    const count = await Order.find({ 'status': 'delivered' }).countDocuments();
    const overallData = await Order.aggregate([

      {
        $match: {
          status: 'delivered'
        }
      },

      {
        $group: {
          _id: "",
          totalSalesCount: { $sum: 1 },
          totalOrderAmount: { $sum: '$subtotal' },
          totalDiscount: { $sum: '$discount' }
        }
      }
    ]);

    console.log('overallData:', overallData);

    res.render('admin/salesreport', {
      orderData,
      overallData,
      // totalpages: Math.ceil(count / limit),
      // currentpage: page,
      // nextpage: page + 1 <= Math.ceil(count / limit) ? page + 1 : 1,
      // prevpage: page - 1 >= 1 ? page - 1 : 1,
    });


  } catch (error) {
    console.log(error)
  }
}

const filterSales = async (req, res) => {
  try {
    let fromdate, todate;
    const currentDate = new Date();

    const overallData = await Order.aggregate([
      {
        $match: {
          'status': 'delivered'
        }
      },
      {
        $group: {
          _id: "",
          totalSalesCount: { $sum: 1 },
          totalOrderAmount: { $sum: '$subtotal' },
          totalDiscount: { $sum: '$discount' }
        }
      }
    ]);

    const range = req.body.range;
    switch (range) {
      case 'daily':
        fromdate = new Date(currentDate);
        fromdate.setHours(0, 0, 0, 0);
        todate = new Date(currentDate);
        todate.setHours(23, 59, 59, 999);
        break;
      case 'weekly':
        const currentDateCopy1 = new Date(currentDate);
        const firstDayOfWeek = new Date(currentDateCopy1.setDate(currentDateCopy1.getDate() - currentDateCopy1.getDay()));
        const lastDayOfWeek = new Date(currentDateCopy1.setDate(currentDateCopy1.getDate() + 6)); // Saturday
        fromdate = new Date(firstDayOfWeek);
        fromdate.setHours(0, 0, 0, 0);
        todate = new Date(lastDayOfWeek);
        todate.setHours(23, 59, 59, 999);
        break;
      case 'monthly':
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        fromdate = new Date(firstDayOfMonth);
        fromdate.setHours(0, 0, 0, 0);
        todate = new Date(lastDayOfMonth);
        todate.setHours(23, 59, 59, 999);
        break;
      case 'yearly':
        const firstDayOfYear = new Date(currentDate.getFullYear(), 0, 1);
        const lastDayOfYear = new Date(currentDate.getFullYear() + 1, 0, 0);
        fromdate = new Date(firstDayOfYear);
        fromdate.setHours(0, 0, 0, 0);
        todate = new Date(lastDayOfYear);
        todate.setHours(23, 59, 59, 999);
        break;
      case 'custom':
        fromdate = req.body.fromdate ? new Date(req.body.fromdate) : null;
        if (fromdate) fromdate.setHours(0, 0, 0, 0);
        todate = req.body.todate ? new Date(req.body.todate) : null;
        if (todate) todate.setHours(23, 59, 59, 999);
        break;
    }

    const orderData = await Order.find({
      'Date': { $lt: todate || currentDate, $gt: fromdate || new Date(0) },
      'status': 'delivered' // Filter only delivered orders
    })
      .populate({
        path: 'user',
        model: 'User',
      })
      .populate({
        path: 'product.productId',
        model: 'Product',
      })
      .sort({ Date: -1 });

    res.render("admin/salesreport", { orderData, overallData });

  } catch (error) {
    console.log(error)
    res.status(500).send("Internal Server Error");
  }
}









const PDFDocument = require('pdfkit');

const generateSalesReportPDF = (fullOrders, currentPage, limit, res) => {
    const doc = new PDFDocument();

    // Set the response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=sales_report.pdf');

    // Pipe the document to the response
    doc.pipe(res);

    doc.fontSize(20).text('Sales Report', { align: 'center' });
    doc.moveDown();

    // Function to generate content for a single page
    const generatePageContent = (startIndex, endIndex, pageNumber) => {
        for (let i = startIndex; i < endIndex; i++) {
            const order = fullOrders[i];
            // Add order details to the PDF
            doc.fontSize(16).text(`Order #${i + 1} ` , { align: 'center' });
            doc.fontSize(12).text( `Order ID: ${order.ordersId}`);
            doc.text(`Delivery Date: ${new Date(order.expectedDelivery).toDateString()}`);
            doc.text(`Customer Name: ${order.deliveryAddress.fullName}`);
            doc.moveDown();

            doc.text('Products:');
            order.items.forEach(item => {
                doc.text(`  - ${item.productId ? item.productId.name : 'Product Name Not Available'}, Quantity: ${item.quantity}, Price: ₹${item.price}`);
                
            });
            doc.moveDown();

            const offerDiscount = order.offerDiscount || 0;
            const couponDiscount = order.couponDiscount || 0;
            const fullDiscount = offerDiscount + couponDiscount;

            doc.text(`Total Discount: ₹${fullDiscount.toFixed(2)}`);
            doc.text(`Payment Method: ${order.paymentMethod}`);
            doc.text(`Total Amount: ₹${order.total.toFixed(2)}`);
            doc.moveDown();
            doc.strokeColor('black').lineWidth(1).moveTo(doc.x, doc.y).lineTo(doc.page.width - 50, doc.y).stroke();
            doc.moveDown();
        }
        
        // Add pagination to the footer
        addFooter(pageNumber);
    };

    // Function to add pagination to the footer
    const addFooter = (pageNumber) => {
        doc.fontSize(10).text(`Page ${pageNumber}`, doc.page.width - 50, doc.page.height - 20, { align: 'right' });
    };

    // Calculate the total number of pages
    const totalPages = Math.ceil(fullOrders.length / limit);

    // Loop through each page
    for (let page = currentPage; page <= totalPages; page++) {
        // Start a new page only if it's not the first page
        if (page !== currentPage) {
            doc.addPage();
        }

        // Calculate the starting and ending index based on pagination
        const startIndex = (page - 1) * limit;
        const endIndex = Math.min(startIndex + limit, fullOrders.length);

        // Generate content for the current page
        generatePageContent(startIndex, endIndex, page);
    }

    // Finalize the PDF document
    doc.end();
};

module.exports = { generateSalesReportPDF };


























<%- include('../adminLayouts/header.ejs') %>
    <%- include('../adminLayouts/navbar.ejs') %>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

        <section class="content-main">
            <div class="container">
                <div class="content-header"  style="display: block;text-align: center;">
                    <h2 class="content-title card-title">Add Product</h2>
                </div>
                <h4 class="content-title card-title">Add a new product</h4>

                <div class="card">
                    <div class="card-body">
                        <form enctype="multipart/form-data" action="/admin/product/addproduct" id="addProduct"
                            method="post" class="product-form" novalidate>
                            <div class="form-group">
                                <label for="name">Name</label>
                                <input type="text" class="form-control" id="name" name="name">
                                <div class="error-message" id="name-error"></div>
                            </div>
                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                                <div class="error-message" id="description-error"></div>
                            </div>
                            <div class="form-group">
                                <label for="brand">Brand</label>
                                <input type="text" class="form-control" id="brand" name="brand">
                                <div class="error-message" id="brand-error"></div>
                            </div>
                            <div class="form-group">
                                <label for="price">Price</label>
                                <input type="number" class="form-control" id="price" name="price">
                                <div class="error-message" id="price-error"></div>
                            </div>

                            <div class="form-group">
                                <label for="gender">Gender</label>
                                <select class="form-control" id="gender" name="gender">
                                    <option value="">-----Choose gender-----</option>
                                    <option value="Men">Men</option>
                                    <option value="Women">Women</option>
                                    <option value="Kids">Kids</option>
                                </select>
                                <div class="error-message" id="gender-error"></div>
                            </div>

                            <div class="form-group">
                                <label for="category">Category</label>
                                <select class="form-control" id="category" name="category">
                                    <option value="">-----Choose category-----</option>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>">
                                            <%= category.categoryName %>
                                        </option>
                                        <% }); %>
                                </select>
                                <div class="error-message" id="category-error"></div>
                            </div>

                            <div class="form-group">
                                <label for="stockCount">Stock Count</label>
                                <input type="number" class="form-control" id="stockCount" name="stockCount">
                                <div class="error-message" id="stockCount-error"></div>
                            </div>
                            <div class="form-group">
                                <label for="size">Size</label>
                                <select class="form-control" id="size" name="size">
                                    <option value="">-----Choose size-----</option>
                                    <option value="S">S</option>
                                    <option value="M">M</option>
                                    <option value="L">L</option>
                                    <option value="XL">XL</option>
                                    <option value="XXL">XXL</option>
                                </select>
                                <div class="error-message" id="size-error"></div>
                            </div>
                            <label for="productImages" style="display: block; text-align: center;">Product
                                Images</label>
                            <br>
                            <div class='wrapper'>
                                <div class="upload">
                                    <div class="upload-wrapper">
                                        <div class="upload-img">
                                            <!-- image here -->
                                        </div>
                                        <div class="upload-info">
                                            <p>
                                                <span class="upload-info-value">0</span> file(s) uploaded.
                                            </p>
                                        </div>
                                        <div class="upload-area">
                                            <div class="upload-area-img">

                                            </div>
                                            <p class="upload-area-text">Select images or <span>browse</span>.</p>
                                        </div>
                                        <input type="file" class="visually-hidden" id="productImages"
                                            name="productImages" accept="image/*" multiple>
                                    </div>
                                </div>
                            </div>
                            <div class="error-message" id="productImages-error"></div>


                            <br>
                            <button type="submit" class="btn btn-primary" style="display: block; margin: 0 auto;">Add
                                Product</button>
                        </form>
                    </div>
                </div>
            </div>
        </section>
        <!-- Add SweetAlert -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <!-- Add Axios -->
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.3.js"
            integrity="sha256-nQLuAZGRRcILA+6dMBOvcRh5Pe310sBpanc6+QBmyVM=" crossorigin="anonymous"></script>
            <script>
                // regular expressions and error messages
                const priceRegex = /^\d+(\.\d{1,2})?$/;
                const allowedExtensions = ['jpg', 'jpeg', 'png'];
            
                const errorMessages = {
                    name: "Name is required",
                    description: "Description is required",
                    brand: "Brand is required",
                    price: "Price must be a positive number",
                    gender: "Please choose a gender",
                    category: "Please choose a category",
                    stockCount: "Stock Count must be a positive integer",
                    size: "Please select a size",
                    productImages: "Please upload at least 3 images"
                };
            
                let addedFiles = [];
            
                // Toggle error messages
                function toggleError(field, message) {
                    const errorMessage = document.getElementById(`${field}-error`);
                    errorMessage.textContent = message;
                    if (message) {
                        errorMessage.classList.add('error');
                    } else {
                        errorMessage.classList.remove('error');
                    }
                }
            
                $(document).ready(function () {
                    $(".upload-area").click(function () {
                        $('#productImages').trigger('click');
                    });
            
                    $('#productImages').change(function (event) {
                        if (event.target.files) {
                            let filesAmount = event.target.files.length;
                            $('.upload-img').html("");
            
                            for (let i = 0; i < filesAmount; i++) {
                                let reader = new FileReader();
                                reader.onload = function (event) {
                                    let html = `
                                        <div class="uploaded-img">
                                            <img src="${event.target.result}">
                                            <button type="button" class="remove-btn" data-index="${i}">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    `;
                                    $(".upload-img").append(html);
                                }
                                reader.readAsDataURL(event.target.files[i]);
            
                                // Store the file along with its index
                                addedFiles.push({ file: event.target.files[i], index: i });
                                // console.log(`Added file: ${event.target.files[i].name}, Index: ${i}`);
                            }
            
                            $('.upload-info-value').text(filesAmount);
                            $('.upload-img').css('padding', "20px");
                        }
                    });
            
                    $(document).on('click', '.remove-btn', function () {
                        let index = $(this).data('index');
                        if (index !== undefined) {
                            // console.log(`Removing file at index: ${index}`);
                            // Find the file object by its index and remove it from the addedFiles array
                            addedFiles = addedFiles.filter(fileObj => fileObj.index !== index);
            
                            $(this).parent().remove();
                            $('.upload-info-value').text(addedFiles.length);
            
                            // Check if the number of images is less than 3
                            if (addedFiles.length < 3) {
                                toggleError('productImages', errorMessages.productImages);
                            } else {
                                toggleError('productImages', '');
                            }
                        } else {
                            console.error('Index is undefined');
                        }
                    });
                });
            
                document.getElementById('addProduct').addEventListener('submit', function (event) {
                    event.preventDefault(); // Prevent default form submission
            
                    // Create FormData object and append images
                    let formData = new FormData(this);
                    formData.delete('productImages'); // Remove existing images from FormData
                    addedFiles.forEach(file => {
                        formData.append('productImages', file.file);
                    });
                    // Reset error messages
                    Object.keys(errorMessages).forEach(field => toggleError(field, ''));
            
                    // Validate form fields
                    let errors = false;
                    if (!formData.get('name').trim()) {
                        toggleError('name', errorMessages.name);
                        errors = true;
                    }
                    if (!formData.get('brand').trim()) {
                        toggleError('brand', errorMessages.brand);
                        errors = true;
                    }
                    if (!formData.get('description').trim()) {
                        toggleError('description', errorMessages.description);
                        errors = true;
                    }
                    if (!priceRegex.test(formData.get('price')) || formData.get('price') <= 0) {
                        toggleError('price', errorMessages.price);
                        errors = true;
                    }
            
                    if (formData.get('gender') === '') {
                        toggleError('gender', errorMessages.gender);
                        errors = true;
                    }
            
                    if (formData.get('category') === '') {
                        toggleError('category', errorMessages.category);
                        errors = true;
                    }
                    if (!priceRegex.test(formData.get('stockCount')) || formData.get('stockCount') <= 0) {
                        toggleError('stockCount', errorMessages.stockCount);
                        errors = true;
                    }
                    if (formData.get('size') === '') {
                        toggleError('size', errorMessages.size);
                        errors = true;
                    }
                    if (formData.getAll('productImages').length < 3) {
                        toggleError('productImages', errorMessages.productImages);
                        errors = true;
                    } else {
                        const allImagesValid = Array.from(formData.getAll('productImages')).every(image => {
                            const extension = image.name.split('.').pop().toLowerCase();
                            return allowedExtensions.includes(extension);
                        });
                        if (!allImagesValid) {
                            toggleError('productImages', 'Please upload only image files (jpg, jpeg, png)');
                            errors = true;
                        }
                    }
            
                    if (errors) {
                        return false; // Prevent form submission if there are errors
                    }
            
                    // Post form data
                    axios.post('/admin/product/addproduct', formData)
                        .then(res => {
                            if (res.data.status) {
                                // Display success message
                                Swal.fire({
                                    icon: "success",
                                    title: "Product Added Successfully",
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    location.href = res.data.url;
                                }, 2000);
                            } else {
                                console.error(res.data);
                            }
                        })
                        .catch(err => {
                            if (!err.response.data.success) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: err.response.data.message,
                                });
                            } else {
                                console.error(err);
                            }
                        });
                });
            </script>
            
        <%- include('../adminLayouts/footer.ejs') %>























        
// Function to insert user
const insertUser = async (req, res) => {
    try {
        const { name, email, mobile, password,referralCode } = req.body;
     // Check if the user already exists
     if (await User.findOne({ email })) {
        return res.status(400).json({ success: false, message: 'Email Already Exists. Please Use a Different Email.' });
    }
    if (await User.findOne({ mobile })) {
        return res.status(400).json({ success: false, message: 'Phone Number Already Exists. Please Use a Different Phone Number.' });
    }
       // Create a new user
        const spassword = await securePassword(password);
        const user = new User({
            name,
            email,
            mobile,
            password: spassword,
        });

        const userData = await user.save();
        console.log("userData",userData)

        const newReferralCode  = generateReferralCode();
        while (await Referral.findOne({ referalCode: newReferralCode })) {
            newReferralCode = generateReferralCode(); // Regenerate until unique
        }
        let referral;
        if(referralCode){
            const referredByUser = await Referral.findOne({referralCode}).populate('User');
           console.log('referredByUser',referredByUser)
           if(referredByUser && referredByUser.user._id.toString() !== userData._id.toString()){
             referral = new Referral({
                user:userData._id,
                referralCode:newReferralCode ,
                referedBy:referredByUser.user._id
            })

            const wallet = await Wallet.find({$or:{userId:userData._id,userId:referredByUser.user_id}})
            console.log("wallet",wallet)
            if(!wallet){
                const wallet = new Wallet({
                    userId:userData._id?userData._id:referredByUser.user_id,
                    balance:userData._id?50:150,
                    transactions: [{
                        type: 'credit',
                        amount: userData._id?50:150,
                        date: new Date(),
                        description: `Referral bonouse`
                    }]
                });
            }else{
                wallet.balance=userData._id?50:150;
                wallet.transactions= [{
                    type: 'credit',
                    amount: userData._id?50:150,
                    date: new Date(),
                    description: `Referral bonouse`
                }];
            }

           }else {
            return res.status(400).json({ success: false, message: 'Invalid or self-referral code.' });
        }
           
        }else{
             referral = new Referral({
                user:userData._id,
                referalCode:newReferralCode 
               })
        }
      
        await referral.save();
        console.log("referral", referral);
         
        if (userData) {
            // Generate OTP and store it in cookie
            const otp = generateOTP();
            console.log(otp)
            res.cookie('email', email); // Store email in cookie for verification
            await sendVerifyOtp(name, email, otp); // Send OTP to user's email
            res.status(200).json({
                status: true,
                url: '/verifyOtp'
            });
        } else {
            return res.status(500).json({ success: false, message: 'Your registration has failed.' });
        }
    } catch (error) {
        console.log(error.message);
        return res.status(500).json({ success: false, message: 'Internal Server Error. Please try again later.' });
    }
};